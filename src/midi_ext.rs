use midi;
use midi::Note;

use filtered_scan_iter::*;

#[derive(Copy,Clone,Debug,PartialEq)]
pub struct Tone{
	pub note              : Note,
	pub start_time        : u32,
	pub end_time          : u32,
	pub atk_vel           : u8,
	pub rel_vel           : u8,
	pub channel           : u8,
	pub instrument_program: u8,
	pub instrument_bank   : u16,
}
pub fn midi_track_to_tones(midi_track: &midi::Track) -> Vec<Tone>{
	use core::u8;
	use midi::{MidiEvent,MidiEventType};

	midi_track.events
		.iter()
		.filtered_scan(
			(0 , [None; (u8::MAX as usize)-(u8::MIN as usize)].to_vec() , 0,0), //TODO: Is this conversion inefficient? The allocation certainly should be.
			|&mut (ref mut time,ref mut notes_on,ref mut program,ref mut bank) , &midi::Event{delta_time,ref event,..}|{
				*time+= delta_time;

				if let &midi::EventType::Midi(MidiEvent{event: midi_event_type,channel,..}) = event{
					match midi_event_type{
						MidiEventType::NoteOn(note,atk_vel) => {
							let note_on = &mut notes_on[Into::<u8>::into(note) as usize];

							if note_on.is_none(){
								*note_on = Some((*time,atk_vel));
							}

							None
						},
						MidiEventType::NoteOff(note,rel_vel) => {
							let note_on = &mut notes_on[Into::<u8>::into(note) as usize];

							if let &mut Some((start_time,atk_vel)) = note_on{
								*note_on = None;
								Some(Tone{
									start_time        : start_time,
									end_time          : *time,
									note              : note,
									atk_vel           : atk_vel,
									rel_vel           : rel_vel,
									channel           : channel,
									instrument_program: *program,
									instrument_bank   : *bank,
								})
							}else{
								None
							}
						},
						MidiEventType::ProgramChange(new_program) => {
							*program = new_program;
							None
						},
						MidiEventType::Controller(0,value) => { //Bank Select (Most significant byte)
							*bank = (*bank & 0b_00000000_11111111) | ((value as u16) << 8);
							None
						},
						MidiEventType::Controller(32,value) => { //Bank Select (Least significant byte)
							*bank = (*bank & 0b_11111111_00000000) | (value as u16);
							None
						},
						_ => None
					}
				}else{
					None
				}
			}// as fn(&mut (u32,Vec<Option<(u32,u8)>>),&midi::Event) -> Option<_>
		)
		.collect()
}

pub fn midi_duration(midi_data: &midi::SimpleMidiFile) -> u32{
	midi_data
		.tracks
		.iter()
		.map(|track| track.events
			.iter()
			.fold(0 , |time , &midi::Event{delta_time,..}| time + delta_time)
		)
		.max()
		.unwrap_or(0)
}

pub const NOTES: usize = 128;

pub fn note_name(note: Note) -> &'static str{match note{
	Note::C1n => "C₋₁",
	Note::Cs1n=> "C♯₋₁",
	Note::D1n => "D₋₁",
	Note::Ds1n=> "D♯₋₁",
	Note::E1n => "E₋₁",
	Note::F1n => "F₋₁",
	Note::Fs1n=> "F♯₋₁",
	Note::G1n => "G₋₁",
	Note::Gs1n=> "G♯₋₁",
	Note::A1n => "A₋₁",
	Note::As1n=> "A♯₋₁",
	Note::B1n => "B₋₁",
	Note::C0  => "C₀",
	Note::Cs0 => "C♯₀",
	Note::D0  => "D₀",
	Note::Ds0 => "D♯₀",
	Note::E0  => "E₀",
	Note::F0  => "F₀",
	Note::Fs0 => "F♯₀",
	Note::G0  => "G₀",
	Note::Gs0 => "G♯₀",
	Note::A0  => "A₀",
	Note::As0 => "A♯₀",
	Note::B0  => "B₀",
	Note::C1  => "C₁",
	Note::Cs1 => "C♯₁",
	Note::D1  => "D₁",
	Note::Ds1 => "D♯₁",
	Note::E1  => "E₁",
	Note::F1  => "F₁",
	Note::Fs1 => "F♯₁",
	Note::G1  => "G₁",
	Note::Gs1 => "G♯₁",
	Note::A1  => "A₁",
	Note::As1 => "A♯₁",
	Note::B1  => "B₁",
	Note::C2  => "C₂",
	Note::Cs2 => "C♯₂",
	Note::D2  => "D₂",
	Note::Ds2 => "D♯₂",
	Note::E2  => "E₂",
	Note::F2  => "F₂",
	Note::Fs2 => "F♯₂",
	Note::G2  => "G₂",
	Note::Gs2 => "G♯₂",
	Note::A2  => "A₂",
	Note::As2 => "A♯₂",
	Note::B2  => "B₂",
	Note::C3  => "C₃",
	Note::Cs3 => "C♯₃",
	Note::D3  => "D₃",
	Note::Ds3 => "D♯₃",
	Note::E3  => "E₃",
	Note::F3  => "F₃",
	Note::Fs3 => "F♯₃",
	Note::G3  => "G₃",
	Note::Gs3 => "G♯₃",
	Note::A3  => "A₃",
	Note::As3 => "A♯₃",
	Note::B3  => "B₃",
	Note::C4  => "C₄",
	Note::Cs4 => "C♯₄",
	Note::D4  => "D₄",
	Note::Ds4 => "D♯₄",
	Note::E4  => "E₄",
	Note::F4  => "F₄",
	Note::Fs4 => "F♯₄",
	Note::G4  => "G₄",
	Note::Gs4 => "G♯₄",
	Note::A4  => "A₄",
	Note::As4 => "A♯₄",
	Note::B4  => "B₄",
	Note::C5  => "C₅",
	Note::Cs5 => "C♯₅",
	Note::D5  => "D₅",
	Note::Ds5 => "D♯₅",
	Note::E5  => "E₅",
	Note::F5  => "F₅",
	Note::Fs5 => "F♯₅",
	Note::G5  => "G₅",
	Note::Gs5 => "G♯₅",
	Note::A5  => "A₅",
	Note::As5 => "A♯₅",
	Note::B5  => "B₅",
	Note::C6  => "C₆",
	Note::Cs6 => "C♯₆",
	Note::D6  => "D₆",
	Note::Ds6 => "D♯₆",
	Note::E6  => "E₆",
	Note::F6  => "F₆",
	Note::Fs6 => "F♯₆",
	Note::G6  => "G₆",
	Note::Gs6 => "G♯₆",
	Note::A6  => "A₆",
	Note::As6 => "A♯₆",
	Note::B6  => "B₆",
	Note::C7  => "C₇",
	Note::Cs7 => "C♯₇",
	Note::D7  => "D₇",
	Note::Ds7 => "D♯₇",
	Note::E7  => "E₇",
	Note::F7  => "F₇",
	Note::Fs7 => "F♯₇",
	Note::G7  => "G₇",
	Note::Gs7 => "G♯₇",
	Note::A7  => "A₇",
	Note::As7 => "A♯₇",
	Note::B7  => "B₇",
	Note::C8  => "C₈",
	Note::Cs8 => "C♯₈",
	Note::D8  => "D₈",
	Note::Ds8 => "D♯₈",
	Note::E8  => "E₈",
	Note::F8  => "F₈",
	Note::Fs8 => "F♯₈",
	Note::G8  => "G₈",
	Note::Gs8 => "G♯₈",
	Note::A8  => "A₈",
	Note::As8 => "A♯₈",
	Note::B8  => "B₈",
	Note::C9  => "C₉",
	Note::Cs9 => "C♯₉",
	Note::D9  => "D₉",
	Note::Ds9 => "D♯₉",
	Note::E9  => "E₉",
	Note::F9  => "F₉",
	Note::Fs9 => "F♯₉",
	Note::G9  => "G₉",
}}

//TODO: https://immusic.co/gm_gm2_overview/

#[repr(u8)]
pub enum GeneralMidiLvl1PatchFamily{
	Piano,
	ChromaticPercussion,
	Organ,
	Guitar,
	Bass,
	Strings,
	Ensemble,
	Brass,
	Reed,
	Pipe,
	SynthLead,
	SynthPad,
	SynthEffects,
	Ethnic,
	Percussive,
	SoundEffects,
}
impl GeneralMidiLvl1PatchFamily{
	pub fn from_instrument(instrument: GeneralMidiLvl1Patch) -> Self{use GeneralMidiLvl1PatchFamily::*; match instrument as u8{
		  1..=  8 => Piano,
		  9..= 16 => ChromaticPercussion,
		 17..= 24 => Organ,
		 25..= 32 => Guitar,
		 33..= 40 => Bass,
		 41..= 48 => Strings,
		 49..= 56 => Ensemble,
		 57..= 64 => Brass,
		 65..= 72 => Reed,
		 73..= 80 => Pipe,
		 81..= 88 => SynthLead,
		 89..= 96 => SynthPad,
		 97..=104 => SynthEffects,
		105..=112 => Ethnic,
		113..=120 => Percussive,
		121..=128 => SoundEffects,
		_         => unreachable!()
	}}

	pub fn name(self) -> &'static str{match self{
		Self::Piano               => "Piano",
		Self::ChromaticPercussion => "Chromatic Percussion",
		Self::Organ               => "Organ",
		Self::Guitar              => "Guitar",
		Self::Bass                => "Bass",
		Self::Strings             => "Strings",
		Self::Ensemble            => "Ensemble",
		Self::Brass               => "Brass",
		Self::Reed                => "Reed",
		Self::Pipe                => "Pipe",
		Self::SynthLead           => "Synth Lead",
		Self::SynthPad            => "Synth Pad",
		Self::SynthEffects        => "Synth Effects",
		Self::Ethnic              => "Ethnic",
		Self::Percussive          => "Percussive",
		Self::SoundEffects        => "Sound Effects",
	}}
}

#[repr(u8)]
pub enum GeneralMidiLvl1Patch{
	AcousticGrandPiano  = 1  ,
	BrightAcousticPiano = 2  ,
	ElectricGrandPiano  = 3  ,
	HonkyTonkPiano      = 4  ,
	ElectricPiano1      = 5  ,
	ElectricPiano2      = 6  ,
	Harpsichord         = 7  ,
	Clavi               = 8  ,
	Celesta             = 9  ,
	Glockenspiel        = 10 ,
	MusicBox            = 11 ,
	Vibraphone          = 12 ,
	Marimba             = 13 ,
	Xylophone           = 14 ,
	TubularBells        = 15 ,
	Dulcimer            = 16 ,
	DrawbarOrgan        = 17 ,
	PercussiveOrgan     = 18 ,
	RockOrgan           = 19 ,
	ChurchOrgan         = 20 ,
	ReedOrgan           = 21 ,
	Accordion           = 22 ,
	Harmonica           = 23 ,
	TangoAccordion      = 24 ,
	AcousticGuitarNylon = 25 ,
	AcousticGuitarSteel = 26 ,
	ElectricGuitarJazz  = 27 ,
	ElectricGuitarClean = 28 ,
	ElectricGuitarMuted = 29 ,
	OverdrivenGuitar    = 30 ,
	DistortionGuitar    = 31 ,
	GuitarHarmonics     = 32 ,
	AcousticBass        = 33 ,
	ElectricBassFinger  = 34 ,
	ElectricBassPick    = 35 ,
	FretlessBass        = 36 ,
	SlapBass1           = 37 ,
	SlapBass2           = 38 ,
	SynthBass1          = 39 ,
	SynthBass2          = 40 ,
	Violin              = 41 ,
	Viola               = 42 ,
	Cello               = 43 ,
	Contrabass          = 44 ,
	TremoloStrings      = 45 ,
	PizzicatoStrings    = 46 ,
	OrchestralHarp      = 47 ,
	Timpani             = 48 ,
	StringEnsemble1     = 49 ,
	StringEnsemble2     = 50 ,
	SynthStrings1       = 51 ,
	SynthStrings2       = 52 ,
	ChoirAahs           = 53 ,
	VoiceOohs           = 54 ,
	SynthVoice          = 55 ,
	OrchestraHit        = 56 ,
	Trumpet             = 57 ,
	Trombone            = 58 ,
	Tuba                = 59 ,
	MutedTrumpet        = 60 ,
	FrenchHorn          = 61 ,
	BrassSection        = 62 ,
	SynthBrass1         = 63 ,
	SynthBrass2         = 64 ,
	SopranoSax          = 65 ,
	AltoSax             = 66 ,
	TenorSax            = 67 ,
	BaritoneSax         = 68 ,
	Oboe                = 69 ,
	EnglishHorn         = 70 ,
	Bassoon             = 71 ,
	Clarinet            = 72 ,
	Piccolo             = 73 ,
	Flute               = 74 ,
	Recorder            = 75 ,
	PanFlute            = 76 ,
	BlownBottle         = 77 ,
	Shakuhachi          = 78 ,
	Whistle             = 79 ,
	Ocarina             = 80 ,
	Lead1Square         = 81 ,
	Lead2Sawtooth       = 82 ,
	Lead3Calliope       = 83 ,
	Lead4Chiff          = 84 ,
	Lead5Charang        = 85 ,
	Lead6Voice          = 86 ,
	Lead7Fifths         = 87 ,
	Lead8BassAndLead    = 88 ,
	Pad1NewAge          = 89 ,
	Pad2Warm            = 90 ,
	Pad3Polysynth       = 91 ,
	Pad4Choir           = 92 ,
	Pad5Bowed           = 93 ,
	Pad6Metallic        = 94 ,
	Pad7Halo            = 95 ,
	Pad8Sweep           = 96 ,
	FX1Rain             = 97 ,
	FX2Soundtrack       = 98 ,
	FX3Crystal          = 99 ,
	FX4Atmosphere       = 100,
	FX5Brightness       = 101,
	FX6Goblins          = 102,
	FX7Echoes           = 103,
	FX8SciFi            = 104,
	Sitar               = 105,
	Banjo               = 106,
	Shamisen            = 107,
	Koto                = 108,
	Kalimba             = 109,
	BagPipe             = 110,
	Fiddle              = 111,
	Shanai              = 112,
	TinkleBell          = 113,
	Agogo               = 114,
	SteelDrums          = 115,
	Woodblock           = 116,
	TaikoDrum           = 117,
	MelodicTom          = 118,
	SynthDrum           = 119,
	ReverseCymbal       = 120,
	GuitarFretNoise     = 121,
	BreathNoise         = 122,
	Seashore            = 123,
	BirdTweet           = 124,
	TelephoneRing       = 125,
	Helicopter          = 126,
	Applause            = 127,
	Gunshot             = 128,
}
impl GeneralMidiLvl1Patch{
	pub fn name(self) -> &'static str{match self{
		Self::AcousticGrandPiano  => "Acoustic Grand Piano",
		Self::BrightAcousticPiano => "Bright Acoustic Piano",
		Self::ElectricGrandPiano  => "Electric Grand Piano",
		Self::HonkyTonkPiano      => "Honky-tonk Piano",
		Self::ElectricPiano1      => "Electric Piano 1",
		Self::ElectricPiano2      => "Electric Piano 2",
		Self::Harpsichord         => "Harpsichord",
		Self::Clavi               => "Clavi",
		Self::Celesta             => "Celesta",
		Self::Glockenspiel        => "Glockenspiel",
		Self::MusicBox            => "Music Box",
		Self::Vibraphone          => "Vibraphone",
		Self::Marimba             => "Marimba",
		Self::Xylophone           => "Xylophone",
		Self::TubularBells        => "Tubular Bells",
		Self::Dulcimer            => "Dulcimer",
		Self::DrawbarOrgan        => "Drawbar Organ",
		Self::PercussiveOrgan     => "Percussive Organ",
		Self::RockOrgan           => "Rock Organ",
		Self::ChurchOrgan         => "Church Organ",
		Self::ReedOrgan           => "Reed Organ",
		Self::Accordion           => "Accordion",
		Self::Harmonica           => "Harmonica",
		Self::TangoAccordion      => "Tango Accordion",
		Self::AcousticGuitarNylon => "Acoustic Guitar (Nylon)",
		Self::AcousticGuitarSteel => "Acoustic Guitar (Steel)",
		Self::ElectricGuitarJazz  => "Electric Guitar (Jazz)",
		Self::ElectricGuitarClean => "Electric Guitar (Clean)",
		Self::ElectricGuitarMuted => "Electric Guitar (Muted)",
		Self::OverdrivenGuitar    => "Overdriven Guitar",
		Self::DistortionGuitar    => "Distortion Guitar",
		Self::GuitarHarmonics     => "Guitar Harmonics",
		Self::AcousticBass        => "Acoustic Bass",
		Self::ElectricBassFinger  => "Electric Bass (Finger)",
		Self::ElectricBassPick    => "Electric Bass (Pick)",
		Self::FretlessBass        => "Fretless Bass",
		Self::SlapBass1           => "Slap Bass 1",
		Self::SlapBass2           => "Slap Bass 2",
		Self::SynthBass1          => "Synth Bass 1",
		Self::SynthBass2          => "Synth Bass 2",
		Self::Violin              => "Violin",
		Self::Viola               => "Viola",
		Self::Cello               => "Cello",
		Self::Contrabass          => "Contrabass",
		Self::TremoloStrings      => "Tremolo Strings",
		Self::PizzicatoStrings    => "Pizzicato Strings",
		Self::OrchestralHarp      => "Orchestral Harp",
		Self::Timpani             => "Timpani",
		Self::StringEnsemble1     => "String Ensemble 1",
		Self::StringEnsemble2     => "String Ensemble 2",
		Self::SynthStrings1       => "Synth Strings 1",
		Self::SynthStrings2       => "Synth Strings 2",
		Self::ChoirAahs           => "Choir Aahs",
		Self::VoiceOohs           => "Voice Oohs",
		Self::SynthVoice          => "Synth Voice",
		Self::OrchestraHit        => "Orchestra Hit",
		Self::Trumpet             => "Trumpet",
		Self::Trombone            => "Trombone",
		Self::Tuba                => "Tuba",
		Self::MutedTrumpet        => "Muted Trumpet",
		Self::FrenchHorn          => "French Horn",
		Self::BrassSection        => "Brass Section",
		Self::SynthBrass1         => "SynthBrass 1",
		Self::SynthBrass2         => "SynthBrass 2",
		Self::SopranoSax          => "Soprano Sax",
		Self::AltoSax             => "Alto Sax",
		Self::TenorSax            => "Tenor Sax",
		Self::BaritoneSax         => "Baritone Sax",
		Self::Oboe                => "Oboe",
		Self::EnglishHorn         => "English Horn",
		Self::Bassoon             => "Bassoon",
		Self::Clarinet            => "Clarinet",
		Self::Piccolo             => "Piccolo",
		Self::Flute               => "Flute",
		Self::Recorder            => "Recorder",
		Self::PanFlute            => "Pan Flute",
		Self::BlownBottle         => "Blown Bottle",
		Self::Shakuhachi          => "Shakuhachi",
		Self::Whistle             => "Whistle",
		Self::Ocarina             => "Ocarina",
		Self::Lead1Square         => "Lead 1 (Square)",
		Self::Lead2Sawtooth       => "Lead 2 (Sawtooth)",
		Self::Lead3Calliope       => "Lead 3 (Calliope)",
		Self::Lead4Chiff          => "Lead 4 (Chiff)",
		Self::Lead5Charang        => "Lead 5 (Charang)",
		Self::Lead6Voice          => "Lead 6 (Voice)",
		Self::Lead7Fifths         => "Lead 7 (Fifths)",
		Self::Lead8BassAndLead    => "Lead 8 (Bass + Lead)",
		Self::Pad1NewAge          => "Pad 1 (New age)",
		Self::Pad2Warm            => "Pad 2 (Warm)",
		Self::Pad3Polysynth       => "Pad 3 (Polysynth)",
		Self::Pad4Choir           => "Pad 4 (Choir)",
		Self::Pad5Bowed           => "Pad 5 (Bowed)",
		Self::Pad6Metallic        => "Pad 6 (Metallic)",
		Self::Pad7Halo            => "Pad 7 (Halo)",
		Self::Pad8Sweep           => "Pad 8 (Sweep)",
		Self::FX1Rain             => "FX 1 (Rain)",
		Self::FX2Soundtrack       => "FX 2 (Soundtrack)",
		Self::FX3Crystal          => "FX 3 (Crystal)",
		Self::FX4Atmosphere       => "FX 4 (Atmosphere)",
		Self::FX5Brightness       => "FX 5 (Brightness)",
		Self::FX6Goblins          => "FX 6 (Goblins)",
		Self::FX7Echoes           => "FX 7 (Echoes)",
		Self::FX8SciFi            => "FX 8 (Sci-fi)",
		Self::Sitar               => "Sitar",
		Self::Banjo               => "Banjo",
		Self::Shamisen            => "Shamisen",
		Self::Koto                => "Koto",
		Self::Kalimba             => "Kalimba",
		Self::BagPipe             => "Bag pipe",
		Self::Fiddle              => "Fiddle",
		Self::Shanai              => "Shanai",
		Self::TinkleBell          => "Tinkle Bell",
		Self::Agogo               => "Agogo",
		Self::SteelDrums          => "Steel Drums",
		Self::Woodblock           => "Woodblock",
		Self::TaikoDrum           => "Taiko Drum",
		Self::MelodicTom          => "Melodic Tom",
		Self::SynthDrum           => "Synth Drum",
		Self::ReverseCymbal       => "Reverse Cymbal",
		Self::GuitarFretNoise     => "Guitar Fret Noise",
		Self::BreathNoise         => "Breath Noise",
		Self::Seashore            => "Seashore",
		Self::BirdTweet           => "Bird Tweet",
		Self::TelephoneRing       => "Telephone Ring",
		Self::Helicopter          => "Helicopter",
		Self::Applause            => "Applause",
		Self::Gunshot             => "Gunshot",
	}}
}


pub enum GeneralMidiLvl1PercussionNote{
	AcousticBassDrum   = 35,
	BassDrum1          = 36,
	SideStickOrRimshot = 37,
	AcousticSnare      = 38,
	HandClap           = 39,
	ElectricSnare      = 40,
	LowFloorTom        = 41,
	ClosedHiHat        = 42,
	HighFloorTom       = 43,
	PedalHiHat         = 44,
	LowTom             = 45,
	OpenHiHat          = 46,
	LowMidTom          = 47,
	HiMidTom           = 48,
	CrashCymbal1       = 49,
	HighTom            = 50,
	RideCymbal1        = 51,
	ChineseCymbal      = 52,
	RideBell           = 53,
	Tambourine         = 54,
	SplashCymbal       = 55,
	Cowbell            = 56,
	CrashCymbal2       = 57,
	VibraSlap          = 58,
	RideCymbal2        = 59,
	HighBongo          = 60,
	LowBongo           = 61,
	MuteHighConga      = 62,
	OpenHighConga      = 63,
	LowConga           = 64,
	HighTimbale        = 65,
	LowTimbale         = 66,
	HighAgogo          = 67,
	LowAgogo           = 68,
	Cabasa             = 69,
	Maracas            = 70,
	ShortWhistle       = 71,
	LongWhistle        = 72,
	ShortGuiro         = 73,
	LongGuiro          = 74,
	Claves             = 75,
	HighWoodBlock      = 76,
	LowWoodBlock       = 77,
	MuteCuica          = 78,
	OpenCuica          = 79,
	MuteTriangle       = 80,
	OpenTriangle       = 81,
}

impl GeneralMidiLvl1PercussionNote{
	pub fn name(self) -> &'static str{match self{
	    Self::AcousticBassDrum   => "Acoustic Bass Drum",
	    Self::BassDrum1          => "Bass Drum 1",
	    Self::SideStickOrRimshot => "Side Stick/Rimshot",
	    Self::AcousticSnare      => "Acoustic Snare",
	    Self::HandClap           => "Hand Clap",
	    Self::ElectricSnare      => "Electric Snare",
	    Self::LowFloorTom        => "Low Floor Tom",
	    Self::ClosedHiHat        => "Closed Hi-hat",
	    Self::HighFloorTom       => "High Floor Tom",
	    Self::PedalHiHat         => "Pedal Hi-hat",
	    Self::LowTom             => "Low Tom",
	    Self::OpenHiHat          => "Open Hi-hat",
	    Self::LowMidTom          => "Low-Mid Tom",
	    Self::HiMidTom           => "Hi-Mid Tom",
	    Self::CrashCymbal1       => "Crash Cymbal 1",
	    Self::HighTom            => "High Tom",
	    Self::RideCymbal1        => "Ride Cymbal 1",
	    Self::ChineseCymbal      => "Chinese Cymbal",
	    Self::RideBell           => "Ride Bell",
	    Self::Tambourine         => "Tambourine",
	    Self::SplashCymbal       => "Splash Cymbal",
	    Self::Cowbell            => "Cowbell",
	    Self::CrashCymbal2       => "Crash Cymbal 2",
	    Self::VibraSlap          => "Vibra Slap",
	    Self::RideCymbal2        => "Ride Cymbal 2",
	    Self::HighBongo          => "High Bongo",
	    Self::LowBongo           => "Low Bongo",
	    Self::MuteHighConga      => "Mute High Conga",
	    Self::OpenHighConga      => "Open High Conga",
	    Self::LowConga           => "Low Conga",
	    Self::HighTimbale        => "High Timbale",
	    Self::LowTimbale         => "Low Timbale",
	    Self::HighAgogo          => "High Agogô",
	    Self::LowAgogo           => "Low Agogô",
	    Self::Cabasa             => "Cabasa",
	    Self::Maracas            => "Maracas",
	    Self::ShortWhistle       => "Short Whistle",
	    Self::LongWhistle        => "Long Whistle",
	    Self::ShortGuiro         => "Short Güiro",
	    Self::LongGuiro          => "Long Güiro",
	    Self::Claves             => "Claves",
	    Self::HighWoodBlock      => "High Wood Block",
	    Self::LowWoodBlock       => "Low Wood Block",
	    Self::MuteCuica          => "Mute Cuíca",
	    Self::OpenCuica          => "Open Cuíca",
	    Self::MuteTriangle       => "Mute Triangle",
	    Self::OpenTriangle       => "Open Triangle",
	}}
}
